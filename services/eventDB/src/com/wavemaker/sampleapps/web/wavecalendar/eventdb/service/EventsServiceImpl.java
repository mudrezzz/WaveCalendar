/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wavemaker.sampleapps.web.wavecalendar.eventdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.sampleapps.web.wavecalendar.eventdb.Events;


/**
 * ServiceImpl object for domain model class Events.
 *
 * @see Events
 */
@Service("eventDB.EventsService")
public class EventsServiceImpl implements EventsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EventsServiceImpl.class);


    @Autowired
    @Qualifier("eventDB.EventsDao")
    private WMGenericDao<Events, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Events, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "eventDBTransactionManager")
    @Override
	public Events create(Events events) {
        LOGGER.debug("Creating a new Events with information: {}", events);
        Events eventsCreated = this.wmGenericDao.create(events);
        return eventsCreated;
    }

	@Transactional(readOnly = true, value = "eventDBTransactionManager")
	@Override
	public Events getById(Integer eventsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Events by id: {}", eventsId);
        Events events = this.wmGenericDao.findById(eventsId);
        if (events == null){
            LOGGER.debug("No Events found with id: {}", eventsId);
            throw new EntityNotFoundException(String.valueOf(eventsId));
        }
        return events;
    }

    @Transactional(readOnly = true, value = "eventDBTransactionManager")
	@Override
	public Events findById(Integer eventsId) {
        LOGGER.debug("Finding Events by id: {}", eventsId);
        return this.wmGenericDao.findById(eventsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "eventDBTransactionManager")
	@Override
	public Events update(Events events) throws EntityNotFoundException {
        LOGGER.debug("Updating Events with information: {}", events);
        this.wmGenericDao.update(events);

        Integer eventsId = events.getId();

        return this.wmGenericDao.findById(eventsId);
    }

    @Transactional(value = "eventDBTransactionManager")
	@Override
	public Events delete(Integer eventsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Events with id: {}", eventsId);
        Events deleted = this.wmGenericDao.findById(eventsId);
        if (deleted == null) {
            LOGGER.debug("No Events found with id: {}", eventsId);
            throw new EntityNotFoundException(String.valueOf(eventsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "eventDBTransactionManager")
	@Override
	public Page<Events> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Events");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "eventDBTransactionManager")
    @Override
    public Page<Events> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Events");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "eventDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service eventDB for table Events to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "eventDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "eventDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

