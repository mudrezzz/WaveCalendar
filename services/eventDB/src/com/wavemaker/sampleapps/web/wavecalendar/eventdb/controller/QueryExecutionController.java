/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.wavemaker.sampleapps.web.wavecalendar.eventdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.wavemaker.sampleapps.web.wavecalendar.eventdb.service.EventDBQueryExecutorService;
import com.wavemaker.sampleapps.web.wavecalendar.eventdb.models.query.*;

@RestController(value = "EventDB.QueryExecutionController")
@RequestMapping("/eventDB/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private EventDBQueryExecutorService queryService;

    @RequestMapping(value = "/queries/userevents", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get User Events based on Logged In User and Start and End timestamps.")
    public Page<UsereventsResponse> executeUserevents(@RequestParam(value = "startdate") Timestamp startdate, @RequestParam(value = "enddate") Timestamp enddate, @RequestParam(value = "loggedinuser") Integer loggedinuser, Pageable pageable) {
        LOGGER.debug("Executing named query: userevents");
        Page<UsereventsResponse> _result = queryService.executeUserevents(startdate, enddate, loggedinuser, pageable);
        LOGGER.debug("got the result for named query: userevents, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query userevents")
    @RequestMapping(value = "/queries/userevents/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserevents(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "startdate") Timestamp startdate, @RequestParam(value = "enddate") Timestamp enddate, @RequestParam(value = "loggedinuser") Integer loggedinuser, Pageable pageable) {
        LOGGER.debug("Exporting named query: userevents");

        return queryService.exportUserevents(exportType, startdate, enddate, loggedinuser, pageable);
    }

}


