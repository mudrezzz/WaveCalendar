/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.wavemaker.sampleapps.web.wavecalendar.eventdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.sampleapps.web.wavecalendar.eventdb.models.query.*;

@Service
public class EventDBQueryExecutorServiceImpl implements EventDBQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EventDBQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("eventDBWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(readOnly = true, value = "eventDBTransactionManager")
    @Override
    public Page<UsereventsResponse> executeUserevents(Timestamp startdate, Timestamp enddate, Integer loggedinuser, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("startdate", startdate);
        params.put("enddate", enddate);
        params.put("loggedinuser", loggedinuser);

        return queryExecutor.executeNamedQuery("userevents", params, UsereventsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "eventDBTransactionManager")
    @Override
    public Downloadable exportUserevents(ExportType exportType, Timestamp startdate, Timestamp enddate, Integer loggedinuser, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("startdate", startdate);
        params.put("enddate", enddate);
        params.put("loggedinuser", loggedinuser);

        return queryExecutor.exportNamedQueryData("userevents", params, exportType, UsereventsResponse.class, pageable);
    }

}


